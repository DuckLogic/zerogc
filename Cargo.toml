[package]
name = "zerogc"
version = "0.2.0-alpha.4"
authors = ["Techcable <Techcable@techcable.net>"]
description = "Zero overhead tracing garbage collection for rust"
repository = "https://github.com/DuckLogic/zerogc"
license = "MIT"
edition = "2018"
readme = "README.md"

[dependencies]
scopeguard = "1.1"
# Manually included tracing support for third party libraries
# Providing support for these important libraries,
# gives zerogc batteries included support.
indexmap = { version = "1.6", optional = true }
parking_lot = { version = "0.11", optional = true }
# Used for macros
zerogc-derive = { path = "libs/derive", version = "0.2.0-alpha.4" }

[workspace]
members = ["libs/simple", "libs/derive", "libs/context"]

[features]
default = ["std", "object-format"]
# Depend on the standard library (optional)
#
# This implements tracing
std = ["alloc"]
# Depend on `extern crate alloc` in addition to the Rust `core`
# This is implied by using the standard library (feature="std")
#
# This implements `Trace` for `Box` and collections like `Vec`
alloc = []
# Enables the object format API
#
# This may not be nessicarry (or sufficient) for all collectors.
# For example, the Memory Pool System has its own interface to object formats
#
# This currently requires the `generic_associated_types` feature
object-format = []